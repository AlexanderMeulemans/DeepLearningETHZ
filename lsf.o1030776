Sender: LSF System <lsfadmin@lo-s4-032>
Subject: Job 1030776: <python ResNet18.py --data_augmentation standard --resultfile run_resnet.csv --datafolder train_reduced --infofile final_train_info.csv> in cluster <leonhard> Done

Job <python ResNet18.py --data_augmentation standard --resultfile run_resnet.csv --datafolder train_reduced --infofile final_train_info.csv> was submitted from host <lo-login-02> by user <ameulema> in cluster <leonhard> at Fri Dec 14 12:54:30 2018
Job was executed on host(s) <20*lo-s4-032>, in queue <gpu.4h>, as user <ameulema> in cluster <leonhard> at Fri Dec 14 12:54:40 2018
</cluster/home/ameulema> was used as the home directory.
</cluster/home/ameulema/DeepLearningETHZ/DeepLearningETHZ> was used as the working directory.
Started at Fri Dec 14 12:54:40 2018
Terminated at Fri Dec 14 15:16:22 2018
Results reported at Fri Dec 14 15:16:22 2018

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input
python ResNet18.py --data_augmentation standard --resultfile run_resnet.csv --datafolder train_reduced --infofile final_train_info.csv
------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   8335.25 sec.
    Max Memory :                                 9016 MB
    Average Memory :                             7420.32 MB
    Total Requested Memory :                     90000.00 MB
    Delta Memory :                               80984.00 MB
    Max Swap :                                   -
    Max Processes :                              3
    Max Threads :                                10
    Run time :                                   8502 sec.
    Turnaround time :                            8512 sec.

The output (if any) follows:

/cluster/home/ameulema/DeepLearningETHZ/DeepLearningETHZ/helper_functions.py:55: UserWarning: invalid index of a 0-dim tensor. This will be an error in PyTorch 0.5. Use tensor.item() to convert a 0-dim tensor to a Python number
  print('t = %d, loss = %.4f' % (t + 1, loss.data[0]))
/cluster/apps/python/3.6.4/lib64/python3.6/site-packages/PIL/Image.py:2514: DecompressionBombWarning: Image size (94435468 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack.
  DecompressionBombWarning)
<class 'torch.LongTensor'>
<class 'torch.cuda.FloatTensor'>
Starting epoch 1 / 5
t = 100, loss = 1.2274
t = 200, loss = 0.6603
t = 300, loss = 2.0211
t = 400, loss = 1.7080
t = 500, loss = 0.5755
t = 600, loss = 0.7764
t = 700, loss = 0.8511
t = 800, loss = 0.9200
t = 900, loss = 1.2400
t = 1000, loss = 1.0753
t = 1100, loss = 0.4702
t = 1200, loss = 0.7785
t = 1300, loss = 1.5941
t = 1400, loss = 1.2417
t = 1500, loss = 1.2557
t = 1600, loss = 0.7784
t = 1700, loss = 0.6026
t = 1800, loss = 0.7874
t = 1900, loss = 0.8429
t = 2000, loss = 0.6614
t = 2100, loss = 2.4081
t = 2200, loss = 1.4103
t = 2300, loss = 0.8271
t = 2400, loss = 1.3330
t = 2500, loss = 0.6936
t = 2600, loss = 1.4285
t = 2700, loss = 0.7514
t = 2800, loss = 0.8295
t = 2900, loss = 0.3906
t = 3000, loss = 0.9589
t = 3100, loss = 0.6318
t = 3200, loss = 1.1933
t = 3300, loss = 0.9655
t = 3400, loss = 0.3322
t = 3500, loss = 0.8131
t = 3600, loss = 0.7747
t = 3700, loss = 0.6668
t = 3800, loss = 0.9981
t = 3900, loss = 0.9655
t = 4000, loss = 1.3743
Checking accuracy!
Got 9774 / 16094 correct (60.73)
Checking accuracy!
Got 1996 / 3449 correct (57.87)
Starting epoch 2 / 5
t = 100, loss = 0.5821
t = 200, loss = 0.8520
t = 300, loss = 0.9218
t = 400, loss = 1.6893
t = 500, loss = 1.9081
t = 600, loss = 1.0089
t = 700, loss = 1.1684
t = 800, loss = 0.7615
t = 900, loss = 1.1175
t = 1000, loss = 1.5594
t = 1100, loss = 0.6985
t = 1200, loss = 1.2831
t = 1300, loss = 1.1587
t = 1400, loss = 0.3446
t = 1500, loss = 0.6321
t = 1600, loss = 2.5192
t = 1700, loss = 0.8939
t = 1800, loss = 1.4121
t = 1900, loss = 0.5749
t = 2000, loss = 0.9458
t = 2100, loss = 0.9300
t = 2200, loss = 0.5800
t = 2300, loss = 0.9218
t = 2400, loss = 1.1966
t = 2500, loss = 1.2002
t = 2600, loss = 0.6453
t = 2700, loss = 1.3150
t = 2800, loss = 1.3710
t = 2900, loss = 0.7535
t = 3000, loss = 0.5841
t = 3100, loss = 1.5257
t = 3200, loss = 1.9492
t = 3300, loss = 1.2099
t = 3400, loss = 1.2917
t = 3500, loss = 1.1141
t = 3600, loss = 0.5167
t = 3700, loss = 0.5660
t = 3800, loss = 1.0831
t = 3900, loss = 0.5090
t = 4000, loss = 1.0949
Checking accuracy!
Got 10045 / 16094 correct (62.41)
Checking accuracy!
Got 1924 / 3449 correct (55.78)
Starting epoch 3 / 5
t = 100, loss = 0.9608
t = 200, loss = 0.7685
t = 300, loss = 0.7837
t = 400, loss = 1.0013
t = 500, loss = 0.9424
t = 600, loss = 0.5383
t = 700, loss = 0.6401
t = 800, loss = 0.5907
t = 900, loss = 0.3155
t = 1000, loss = 0.9502
t = 1100, loss = 1.1089
t = 1200, loss = 0.9559
t = 1300, loss = 1.4536
t = 1400, loss = 1.4938
t = 1500, loss = 1.2268
t = 1600, loss = 1.2607
t = 1700, loss = 0.6154
t = 1800, loss = 0.8951
t = 1900, loss = 1.4028
t = 2000, loss = 0.4877
t = 2100, loss = 1.0192
t = 2200, loss = 1.2109
t = 2300, loss = 0.8742
t = 2400, loss = 0.2766
t = 2500, loss = 0.8181
t = 2600, loss = 0.4910
t = 2700, loss = 0.5160
t = 2800, loss = 0.4655
t = 2900, loss = 0.9140
t = 3000, loss = 0.6875
t = 3100, loss = 0.4166
t = 3200, loss = 1.0938
t = 3300, loss = 0.9727
t = 3400, loss = 0.5148
t = 3500, loss = 0.7619
t = 3600, loss = 0.7308
t = 3700, loss = 1.1914
t = 3800, loss = 1.0776
t = 3900, loss = 1.7373
t = 4000, loss = 0.9962
Checking accuracy!
Got 9902 / 16094 correct (61.53)
Checking accuracy!
Got 1935 / 3449 correct (56.10)
Starting epoch 4 / 5
t = 100, loss = 1.0828
t = 200, loss = 1.8018
t = 300, loss = 0.4769
t = 400, loss = 1.7900
t = 500, loss = 0.6767
t = 600, loss = 0.9951
t = 700, loss = 1.3749
t = 800, loss = 1.2071
t = 900, loss = 1.1215
t = 1000, loss = 1.2950
t = 1100, loss = 0.6137
t = 1200, loss = 1.1320
t = 1300, loss = 0.9773
t = 1400, loss = 1.3571
t = 1500, loss = 0.6924
t = 1600, loss = 1.1904
t = 1700, loss = 0.5106
t = 1800, loss = 1.2347
t = 1900, loss = 1.1846
t = 2000, loss = 1.2346
t = 2100, loss = 0.4871
t = 2200, loss = 1.7723
t = 2300, loss = 0.3028
t = 2400, loss = 1.2683
t = 2500, loss = 0.4340
t = 2600, loss = 0.5647
t = 2700, loss = 1.0652
t = 2800, loss = 1.4835
t = 2900, loss = 0.7188
t = 3000, loss = 0.4618
t = 3100, loss = 1.1247
t = 3200, loss = 1.3557
t = 3300, loss = 0.4294
t = 3400, loss = 0.6100
t = 3500, loss = 1.8061
t = 3600, loss = 1.3099
t = 3700, loss = 0.9681
t = 3800, loss = 0.8777
t = 3900, loss = 1.2272
t = 4000, loss = 0.9056
Checking accuracy!
Got 9946 / 16094 correct (61.80)
Checking accuracy!
Got 2025 / 3449 correct (58.71)
Starting epoch 5 / 5
t = 100, loss = 0.5924
t = 200, loss = 0.7910
t = 300, loss = 0.6113
t = 400, loss = 0.3638
t = 500, loss = 0.7735
t = 600, loss = 1.6011
t = 700, loss = 0.8592
t = 800, loss = 1.3413
t = 900, loss = 0.8283
t = 1000, loss = 0.3100
t = 1100, loss = 1.1054
t = 1200, loss = 1.2441
t = 1300, loss = 0.7605
t = 1400, loss = 1.5666
t = 1500, loss = 1.3906
t = 1600, loss = 0.4753
t = 1700, loss = 1.0632
t = 1800, loss = 0.9916
t = 1900, loss = 1.1702
t = 2000, loss = 1.6512
t = 2100, loss = 0.6821
t = 2200, loss = 1.2987
t = 2300, loss = 0.7028
t = 2400, loss = 1.3016
t = 2500, loss = 0.8948
t = 2600, loss = 0.9035
t = 2700, loss = 0.9031
t = 2800, loss = 1.0812
t = 2900, loss = 1.1586
t = 3000, loss = 0.4053
t = 3100, loss = 0.5966
t = 3200, loss = 0.8364
t = 3300, loss = 0.6209
t = 3400, loss = 1.2489
t = 3500, loss = 1.0603
t = 3600, loss = 0.7769
t = 3700, loss = 1.1255
t = 3800, loss = 1.8371
t = 3900, loss = 2.0003
t = 4000, loss = 1.1257
Checking accuracy!
Got 10008 / 16094 correct (62.18)
Checking accuracy!
Got 1986 / 3449 correct (57.58)
Checking accuracy!
Got 1849 / 3448 correct (53.63)
Test accuracy after training last layer: 53.625290023201856
Starting epoch 1 / 1
t = 100, loss = 0.6108
t = 200, loss = 0.7971
t = 300, loss = 0.9133
t = 400, loss = 1.0470
t = 500, loss = 0.9706
t = 600, loss = 1.0185
t = 700, loss = 1.1710
t = 800, loss = 1.0784
t = 900, loss = 0.6727
t = 1000, loss = 0.9882
t = 1100, loss = 0.6238
t = 1200, loss = 0.6026
t = 1300, loss = 0.5969
t = 1400, loss = 1.2448
t = 1500, loss = 1.3853
t = 1600, loss = 0.8490
t = 1700, loss = 1.3108
t = 1800, loss = 0.5455
t = 1900, loss = 0.5409
t = 2000, loss = 1.6938
t = 2100, loss = 1.2925
t = 2200, loss = 1.4629
t = 2300, loss = 0.8434
t = 2400, loss = 0.4024
t = 2500, loss = 0.7659
t = 2600, loss = 0.3690
t = 2700, loss = 0.9751
t = 2800, loss = 1.6623
t = 2900, loss = 0.6937
t = 3000, loss = 1.4530
t = 3100, loss = 0.8148
t = 3200, loss = 1.0279
t = 3300, loss = 1.4710
t = 3400, loss = 0.4038
t = 3500, loss = 0.5783
t = 3600, loss = 0.9408
t = 3700, loss = 1.3426
t = 3800, loss = 0.5911
t = 3900, loss = 0.7504
t = 4000, loss = 0.5642
Checking accuracy!
Got 10004 / 16094 correct (62.16)
Checking accuracy!
Got 1969 / 3449 correct (57.09)
Checking accuracy!
Got 1806 / 3448 correct (52.38)
Test accuracy after training total network with small learning rate: 52.37819025522042
